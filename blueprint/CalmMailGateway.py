# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Credentials
ubuntu_password = read_local_file('ubuntu')
email_address = read_local_file('default_email')
email_password = read_local_file('default_email_password')
UBUNTU = basic_cred('ubuntu', ubuntu_password, name='UBUNTU', type='PASSWORD', default=True)


ubuntu_20_04_cloud = vm_disk_package(
    name="ubuntu_20_04_cloud",
    description="Standard ubuntu 20.04 cloud image",
    config={
        "name": "ubuntu_20_04_cloud",
        "image": {
            "name": "ubuntu_20_04_cloud",
            "type": "DISK_IMAGE",
            "source": "https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img",
            "architecture": "X86_64",
        },
        "product": {"name": "Ubuntu", "version": "20.04"},
        "checksum": {},
    },
)


class EmailAPI(Service):
    @action
    def __create__(self):
        """System action for creating an application"""
        # CalmTask.Exec.escript(name='resize_disk', filename='scripts/create_update_disk_size.py')
        pass


class MailGatewaycalm_VMResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(ubuntu_20_04_cloud, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress('Network-01')]
    guest_customization = AhvVmGC.CloudInit(filename='specs/ubuntu_cloud_init.yaml')


class MailGatewaycalmVM(AhvVm):

    name = 'MailGateway-@@{calm_random}@@'
    resources = MailGatewaycalm_VMResources


class MailGatewayVM(Substrate):

    os_type = 'Linux'
    provider_type = 'AHV_VM'
    provider_spec = MailGatewaycalmVM
    readiness_probe = readiness_probe(
        connection_type='SSH',
        disabled=False,
        retries='5',
        connection_port=22,
        address='@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@',
        delay_secs='20',
    )


class PackageEmailAPI(Package):

    services = [ref(EmailAPI)]

    @action
    def __install__(self):
        CalmTask.Exec.escript(name='resize_disk', filename='scripts/update_disk_size.py')
        CalmTask.Exec.ssh(name='update_os', filename='scripts/package_update_os.sh')
        CalmTask.Delay(name='wait_for_disk_resize', delay_seconds=20)
        CalmTask.Exec.ssh(name='install_docker', filename='scripts/package_install_docker.sh')
        CalmTask.Delay(name='wait_for_reboot', delay_seconds=20)
        CalmTask.Exec.ssh(name='install_mail_api', filename='scripts/package_install_mail_api.sh')


class DefaultDeployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(PackageEmailAPI)]
    substrate = ref(MailGatewayVM)


class Default(Profile):

    deployments = [DefaultDeployment]
    GMAIL_PASSWORD = CalmVariable.Simple.Secret(email_password, is_mandatory=True, runtime=True, label='Gmail Password')
    GMAIL_ADDRESS = CalmVariable.Simple(email_address, is_mandatory=True, runtime=True, label='Gmail Account')


class CalmMailGateway(Blueprint):
    """Rest API gateway to send email messages"""

    services = [EmailAPI]
    packages = [PackageEmailAPI, ubuntu_20_04_cloud]
    substrates = [MailGatewayVM]
    profiles = [Default]
    credentials = [UBUNTU]
